# Apache Configuration File for WordPress (multisite) or PHP Application
# Author: MaximillianGroup (Max Barrett) <maximilliangroup@gmail.com>
# Version 1.0.0
# WordPress and WordPress Multisite, Cloudflare Origin Certificates, Let's Encrypt, Strong SSL Security
# Contact: support@maximilliangroup.us


# -------------------------------
# [CORE] Core settings
# -------------------------------
<IfModule mod_rewrite.c>
    
    # Disable server signature to prevent information disclosure
    ServerSignature Off
  
    # For non-PHP applications
    # Set server timezone environment variable
    <IfModule mod_setenv.c>
        SetEnv TZ "UTC"
    </IfModule>

    # Disable directory listing and unnecessary multi-view handling for security
    Options +FollowSymLinks -Indexes -MultiViews 

    # Secure directory by disabling script execution for certain file types
    AddHandler cgi-script .php .pl .py .jsp .asp .htm .shtml .sh .cgi
    Options -ExecCGI

    # DirectoryIndex: sets the file that Apache will serve if a directory is requested.
    DirectoryIndex index.html index.php /index.php 

    # Protect against DOS attacks by limiting file upload size (10MB)
    LimitRequestBody 10240000
    # If audio / video increase to 100MB
    <FilesMatch "\.(mp3|mp4|avi|acc|flac|wav|ogg)$">
        LimitRequestBody 102400000
    </FilesMatch>
</IfModule>



# ----------------------------------------------------------------------
# Better website experience for IE users. We care of them LOL
# ----------------------------------------------------------------------
# Force the latest IE version, in various cases when it may fall back to IE7 mode
# futher details: github.com/rails/rails/commit/123eb25#commitcomment-118920
# Use ChromeFrame if it's installed for a better experience for the poor IE folks
<IfModule mod_headers.c>
  Header set X-UA-Compatible "IE=Edge,chrome=1"
  # mod_headers cannnot match by content-type, but we don't want to send this header on *everything*...
  <FilesMatch "\.(js|css|gif|png|jpe?g|pdf|xml|oga|ogg|m4a|ogv|mp4|m4v|webm|svg|svgz|eot|ttf|otf|woff|ico|webp|appcache|manifest|htc|crx|oex|xpi|safariextz|vcf)$" >
    Header unset X-UA-Compatible
  </FilesMatch>
  # Header set P3P "policyref="/w3c/p3p.xml", CP="NOI DSP COR NID CUR ADM DEV OUR BUS""
  # OR THIS, SIMPLER
  # Header set P3P "policyref="/w3c/p3p.xml""
</IfModule>




# -------------------------------
# [8G FIREWALL] v1.3 20240222
# https://perishablepress.com/8g-firewall/
# -------------------------------
# 8G:[USER AGENT]
<IfModule mod_rewrite.c>

        RewriteCond %{HTTP_USER_AGENT} ([a-z0-9]{2000,}) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (&lt;|%0a|%0d|%27|%3c|%3e|%00|0x00|\\\x22) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (ahrefs|archiver|curl|libwww-perl|pycurl|scan) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (oppo\sa33|(c99|php|web)shell|site((.){0,2})copier) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (base64_decode|bin/bash|disconnect|eval|unserializ) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (acapbot|acoonbot|alexibot|asterias|attackbot|awario|backdor|becomebot|binlar|blackwidow|blekkobot|blex|blowfish|bullseye|bunnys|butterfly|careerbot|casper) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (checkpriv|cheesebot|cherrypick|chinaclaw|choppy|clshttp|cmsworld|copernic|copyrightcheck|cosmos|crescent|datacha|(\b)demon(\b)|diavol|discobot|dittospyder) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (dotbot|dotnetdotcom|dumbot|econtext|emailcollector|emailsiphon|emailwolf|eolasbot|eventures|extract|eyenetie|feedfinder|flaming|flashget|flicky|foobot|fuck) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (g00g1e|getright|gigabot|go-ahead-got|gozilla|grabnet|grafula|harvest|heritrix|httracks?|icarus6j|jetbot|jetcar|jikespider|kmccrew|leechftp|libweb|liebaofast) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (linkscan|linkwalker|loader|lwp-download|majestic|masscan|miner|mechanize|mj12bot|morfeus|moveoverbot|netmechanic|netspider|nicerspro|nikto|ninja|nominet|nutch) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (octopus|pagegrabber|petalbot|planetwork|postrank|proximic|purebot|queryn|queryseeker|radian6|radiation|realdownload|remoteview|rogerbot|scan|scooter|seekerspid) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (semalt|siclab|sindice|sistrix|sitebot|siteexplorer|sitesnagger|skygrid|smartdownload|snoopy|sosospider|spankbot|spbot|sqlmap|stackrambler|stripper|sucker|surftbot) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (sux0r|suzukacz|suzuran|takeout|teleport|telesoft|true_robots|turingos|turnit|vampire|vikspider|voideye|webleacher|webreaper|webstripper|webvac|webviewer|webwhacker) [NC,OR]
        RewriteCond %{HTTP_USER_AGENT} (winhttp|wwwoffle|woxbot|xaldon|xxxyy|yamanalab|yioopbot|youda|zeus|zmeu|zune|zyborg) [NC]

        RewriteRule .* - [F]

# RewriteRule .* /nG_log.php?log [END,NE,E=nG_USER_AGENT:%1]

</IfModule>
# 8G:[REMOTE HOST]
<IfModule mod_rewrite.c>

        RewriteCond %{REMOTE_HOST} (163data|amazonaws|colocrossing|crimea|g00g1e|justhost|kanagawa|loopia|masterhost|onlinehome|poneytel|sprintdatacenter|reverse.softlayer|safenet|ttnet|woodpecker|wowrack) [NC]

        RewriteRule .* - [F]

# RewriteRule .* /nG_log.php?log [END,NE,E=nG_REMOTE_HOST:%1]

</IfModule>
# 8G:[HTTP REFERRER]
<IfModule mod_rewrite.c>

        RewriteCond %{HTTP_REFERER} (order(\s|%20)by(\s|%20)1--) [NC,OR]
        RewriteCond %{HTTP_REFERER} (@unlink|assert\(|print_r\(|x00|xbshell) [NC,OR]
        RewriteCond %{HTTP_REFERER} (100dollars|best-seo|blue\spill|cocaine|ejaculat|erectile|erections|hoodia|huronriveracres|impotence|levitra|libido|lipitor|mopub\.com|phentermin) [NC,OR]
        RewriteCond %{HTTP_REFERER} (pornhelm|pro[sz]ac|sandyauer|semalt\.com|social-buttions|todaperfeita|tramadol|troyhamby|ultram|unicauca|valium|viagra|vicodin|xanax|ypxaieo) [NC]

        RewriteRule .* - [F]

# RewriteRule .* /nG_log.php?log [END,NE,E=nG_HTTP_REFERRER:%1]

</IfModule>
# 8G:[HTTP COOKIE]
<IfModule mod_rewrite.c>

        RewriteCond %{HTTP_COOKIE} (<|>|\'|%0A|%0D|%27|%3C|%3E|%00) [NC]

        RewriteRule .* - [F]

# RewriteRule .* /nG_log.php?log [END,NE,E=nG_HTTP_COOKIE:%1]

</IfModule>

# 8G:[REQUEST METHOD]
<IfModule mod_rewrite.c>

        RewriteCond %{REQUEST_METHOD} ^(connect|debug|move|trace|track) [NC]

        RewriteRule .* - [F]

# RewriteRule .* /nG_log.php?log [END,NE,E=nG_REQUEST_METHOD:%1]

</IfModule>

# --------------------------------
# [GZIP] GZIP Compression
# --------------------------------
# DEFLATE by Filter Type
<IfModule mod_deflate.c>
        AddOutputFilterByType DEFLATE text/html text/plain text/css text/javascript application/json applicatio>
</IfModule>

<IfModule mod_headers.c>
    RewriteEngine On
    <FilesMatch "\.(js|css)$">
        # serve brotli as primary ensure no double compression
        RewriteCond %{HTTP:Accept-encoding} br
        RewriteCond %{REQUEST_FILENAME}.br -f
        RewriteRule ^(.*)$ $1.br [T=application/x-brotli,E=no-gzip:1,L]
        # serve gzip as alternative, ensure no double compression
        RewriteCond %{HTTP:Accept-encoding} gzip
        RewriteCond %{REQUEST_FILENAME}.gz -f
        RewriteRule ^(.*)$ $1.gz [T=application/x-gzip,E=no-brotli:1,L]
    </FilesMatch>

    <FilesMatch "(\.js\.br|\.css\.br)$">
      # Serve correct encoding type.
      Header append Content-Encoding br
    </FilesMatch>
    <FilesMatch "(\.js\.gz|\.css.gz)$">
      # Serve correct encoding type.
      Header append Content-Encoding gz

      # AddEncoding allows you to have certain browsers uncompress information on the fly. Note: Not all browsers support this.
      AddEncoding x-compress .Z
      AddEncoding x-gzip .gz .tgz
    </FilesMatch>

      # Force proxies to cache brotli &
      # non-brotli css/js files separately.
      Header append Vary Accept-Encoding
    
</IfModule><IfModule mod_deflate.c>

# -------------------------------------------
# [CACHE] Caching
# -------------------------------------------
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/webp "access plus 1 month"
    ExpiresByType image/avif "access plus 1 month"
    ExpiresByType image/gif "access plus 1 month"
    ExpiresByType image/png "access plus 1 month"
    ExpiresByType image/jpg "access plus 1 month"
    ExpiresByType image/jpeg "access plus 1 month"
    ExpiresByType image/svg+xml "access plus 1 year"
    ExpiresByType font/* "access plus 1 year"
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"
    ExpiresByType application/x-font-woff "access plus 1 year"
    ExpiresByType application/vnd.ms-fontobject "access plus 1 year"

    <IfModule mod_headers.c>
        Header append Cache-Control "public"
    </IfModule>
</IfModule>

# -------------------------------------------
# [HTTPS REWRITE] - HTTPS ALWAYS and ONLY
# -------------------------------------------
</IfModule mod_rewrite.c>
  RewriteEngine On
  RewriteBase /

 
 

  ## DENY REQUEST BASED ON REQUEST METHOD
  RewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK|HEAD)$ [NC]
  RewriteRule ^.*$ - [F]

# # # [SPELLCHECK] OPTIONAL # # #
# Enable automatic spelling correction for URLs
<IfModule mod_speling.c>
	CheckSpelling On
</IfModule>
#
# -------------------------------------------
# [REWRITES] WordPress Multisite and other Application Rewrites
# -------------------------------------------
#
<IfModule mod_rewrite.c>
#
# # # BEGIN WORDPRESS STANDARD # # #
		# RewriteEngine On
		# RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
	 	# # adjust to your WordPress subdirectory if applicable
		# RewriteBase /  
		# RewriteRule ^index\.php$ - [L]
		# RewriteCond %{REQUEST_FILENAME} !-f
		# RewriteCond %{REQUEST_FILENAME} !-d
		# RewriteRule . /index.php [L]  # Or adjust path if in a subdirectory
# # # END WORDPRESS STANDARD # # #
#
# # # WORDPRESS MULTISITE SUBFOLDER # # # 
# network type: https://wordpress.org/documentation/article/htaccess/#multisite
		# RewriteEngine On
		# RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
	    # # adjust to your WordPress subdirectory if applicable
		# RewriteBase /
		# RewriteRule ^index\.php$ - [L]
		# # add a trailing slash to /wp-admin
		# RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L]
		# RewriteCond %{REQUEST_FILENAME} -f [OR]
		# RewriteCond %{REQUEST_FILENAME} -d
		# RewriteRule ^ - [L]
		# RewriteRule ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L]
		# RewriteRule ^([_0-9a-zA-Z-]+/)?(.*\.php)$ $2 [L]
		# RewriteRule . index.php [L]
# # # END WORDPRESS MULTISITE SUBDIRECTORY # # #
#
# # # BEGIN WORDPRESS MULTISITE SUBDOMAIN # # # 
# network type: https://wordpress.org/documentation/article/htaccess/#multisite
		#RewriteEngine On
		#RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
		#RewriteBase /
		#RewriteRule ^index\.php$ - [L]
		# add a trailing slash to /wp-admin
		#RewriteRule ^wp-admin$ wp-admin/ [R=301,L]
		#RewriteCond %{REQUEST_FILENAME} -f [OR]
		#RewriteCond %{REQUEST_FILENAME} -d
		#RewriteRule ^ - [L]
		#RewriteRule ^(wp-(content|admin|includes).*) $1 [L]
		#RewriteRule ^(.*\.php)$ $1 [L]
		#RewriteRule . index.php [L]
# # # END WORDPRESS MULTISITE SUBDOMAIN # # # 
#
#
# -------------------------------
# HTTPS ONLY - Domain Rewrites
# -------------------------------
	# # Remove the www dynamically
	RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]
	RewriteRule ^ %{ENV:PROTO}://%1%{REQUEST_URI} [R=301,L]
	# # Rewrite to www dynamically
	# RewriteCond %{REQUEST_URI} !^/robots\.txt$ [NC]
	# RewriteCond %{HTTP_HOST} !^www\.[a-z-]+\.[a-z]{2,6} [NC]
	# RewriteCond %{HTTP_HOST} ([a-z-]+\.[a-z]{2,6})$   [NC]
	# RewriteRule ^/(.*)$ https://%1/$1 [R=301,L]
	# Proxy server calls especially
	RewriteCond %{HTTPS} =on
	RewriteRule ^ - [E=PROTO:https]
	RewriteCond %{HTTPS} !=on
	RewriteRule ^ - [E=PROTO:http]
	# Redirect only frontend URLs from domain.com to clientdomain.com
	RewriteCond %{HTTP_HOST} ^clientsubdomain\.domain\.com$ [NC]
	RewriteRule ^(?!ignite|wp-admin)(.*)$ https://clientdomain.com/$1 [L,R=301]
	#This is crucial to prevent search engines from indexing your backend
	RewriteRule ^/(ignite|wp-admin) - [F,L]
	# # # END DOMAIN REWRITES # # # 
# --------------------------------
# [WEPP/AVIF] - Image File Rewrites
# --------------------------------
	# Check for AVIF browser support, and rewrite
	RewriteCond %{HTTP:Accept} image/avif
	RewriteCond %{DOCUMENT_ROOT}/$1.avif -f
	RewriteRule (.+)\.(jpe?g|png|gif|svg)$ $1.avif [T=image/avif,E=image_optimized:1,L]
	# Check for webp browser support, and rewrite
	RewriteCond %{HTTP:Accept} image/webp
	RewriteCond %{DOCUMENT_ROOT}/$1.webp -f
	RewriteRule (.+)\.(jpe?g|png|gif|svg)$ $1.webp [T=image/webp,E=image_optimized:1,L]
	# Fallback to original image
	RewriteCond %{ENV:image_optimized} !1
	RewriteRule (.+)\.(jpe?g|png|gif|svg)$ $1.$2 [L]
	# # # END IMAGE REWRITES # # # 
#
</IfModule>
#
# # # END REWRITES # # #
#
# --------------------------------
# [HEADERS] - Image File Rewrites
# --------------------------------
<IfModule mod_headers.c>
  Header append Vary Accept env=image_optimized
</IfModule>

<IfModule mod_mime.c>
  AddType image/webp .webp
  AddType image/avif .avif
  AddType text/css   .css .min.css
  AddType application/javascript .js .min.js
</IfModule>

# --------------------------------
# [SECURITY REWRITE] - Final Security Rewrites
# --------------------------------
<IfModule mod_rewrite.c>

RewriteEngine On

# Redirect invalid requests to a custom error page
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^.*$ /error.php [L]

# Trackback spam prevention
RewriteCond %{REQUEST_METHOD} =POST
RewriteCond %{HTTP_USER_AGENT} ^.*(opera|mozilla|firefox|msie|safari).*$ [NC]
RewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\ /.+/trackback/?\ HTTP/ [NC]
RewriteRule .? - [F,NS,L]

# Bogus graphics exploit prevention
RewriteCond %{HTTP:Content-Disposition} \.php [NC]
RewriteCond %{HTTP:Content-Type} image/.+ [NC]
RewriteRule .? - [F,NS,L]

# Deny requests without HTTP_HOST header
RewriteCond %{REQUEST_URI} !^/(wp-login.php|wp-admin/|wp-content/plugins/|wp-includes/).* [NC]
RewriteCond %{HTTP_HOST} ^$
RewriteRule .? - [F,NS,L]

# Deny POST requests without Content-Length
RewriteCond %{REQUEST_METHOD} =POST
RewriteCond %{HTTP:Content-Length} ^$
RewriteCond %{REQUEST_URI} !^/(wp-admin/|wp-content/plugins/|wp-includes/).* [NC]
RewriteRule .? - [F,NS,L]
</IfModule>

# --------------------------------
# [FILE BLOCK] - Block specific files from being accessed directly
# --------------------------------
<FilesMatch "\.(md|exe|sh|bak|inc|pot|po|mo|log|sql|htaccess|htpasswd|ini|phps|fla|psd|sh|cgi)$">
    Order Deny,Allow
    Deny from All
    Allow from env=REDIRECT_STATUS
</FilesMatch>
<FilesMatch "^(wp-config\.php|\.htaccess|\.htpasswd|debug\.log)$">
  Order Deny,Allow
  Deny from All
  Allow from env=REDIRECT_STATUS
</FilesMatch>

# --------------------------------
# [HEADERS] 
# --------------------------------
<IfModule mod_headers.c>
	Header set Content-Language "en-US"

	# Reinforce file type and charset
	AddDefaultCharset UTF-8
	AddType 'text/html; charset=UTF-8' .html
	AddCharset UTF-8 .html .php

        # remove server information for security protection
        Header unset Server	
	# remove other headers which indicate plugins
	Header always unset WP-Super-Cache
	
	# XMLRPC Pingback
	Header always unset X-Pingback
	Header set X-Pingback "https://example.com/xmlrpc.php"
	
        # Content Security policy and Feature Policy
        Header always set Content-Security-Policy "default-src 'self'"
        # OR
        #Header set Content-Security-Policy "default-src * data:; script-src https: 'unsafe-inline' 'unsafe-eval'; style-src https: 'unsafe-inline'"
  
        #Header set Feature-Policy "camera '*'; fullscreen '*'; geolocation *; microphone '*'; autoplay *"

        # --------------------------------
	# [CORS]
	# --------------------------------
	# OPTIONS Enable Cors - uncomment one option

        # OPTION 1
	Header add Access-Control-Allow-Origin "*" 

        # OPTION 2 
        # Capture the current request's origin domain dynamically
	<IfModule mod_setenvif.c>

        	SetEnvIf Origin "^https?://(.*)$" OriginHeader=$0
    
	        # Apply Access-Control-Allow-Origin dynamically based on the Origin header
	        Header always set Access-Control-Allow-Origin %{OriginHeader}e env=OriginHeader

		# There is a security reason for this I forgot from Mozilla
		<FilesMatch "\.(bmp|cur|gif|ico|jpe?g|a?png|svgz?|webp|heic|heif|avif)$">
		   SetEnvIf Origin ":" IS_CORS
		   Header set Access-Control-Allow-Origin "*" env=*IS_CORS*
		</FilesMatch>
	</IfModule>

	## Pre-check Handling Options for the CORS
        <IfModules mod_rewrite.c>

          ## Allows for Pre-check to setup CORS requests
          RewriteCond %{REQUEST_METHOD} OPTIONS
          RewriteRule ^(.*)$ $1 [L,R=204]
        <IfModules>

	# Specify the CORS Headers
        Header set Access-Control-Allow-Methods "GET,PUT,POST,OPTIONS" # Add DELETE if needed
        Header set Access-Control-Allow-Headers "Content-Type, Authorization, X-Custom-Header,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,C$" Upgrade-Insecure-Requests
        Header always set Access-Control-Allow-Credentials true
        Access-Control-Max-Age: 1728000

	Header set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

        ## Always set Secure Cookies
        Header always edit Set-Cookie (.*) "$1, Secure; httponly"

        Header set Referrer-Policy "no-referrer, strict-origin-when-cross-origin"
	Header always set Expect-CT "enforce, max-age=0"

	# Allow timing
 	Header set Timing-Allow-Origin: "*"
      
  	# Set Security Headers
        Header set X-Content-Type-Options "nosniff"
        Header set X-XSS-Protection "1; mode=block"
        Header set Referrer-Policy "no-referrer, strict-origin-when-cross-origin"
        Header set X-Frame-Options "SAMEORIGIN"
        Header set X-Permitted-Cross-Domain-Policies "none"

	# For fonts set any origin
	<FilesMatch "\.(eot|otf|tt[cf]|woff2?)$">
	  Header set Access-Control-Allow-Origin "*"
	</FilesMatch>
	
	Header always set Expect-CT "enforce, max-age=0"
        # FileETag None is not enough for every server.
        Header unset ETag
        # Since we`re sending far-future expires, we don't need ETags for static content.
        # developer.yahoo.com/performance/rules.html#etags
        FileETag None

	# --------------------------------
	# COOP and COEP - independent of eachother, can be tested and deployed separately.
	# --------------------------------
	# "When set together on a top-level document, COEP and COOP ensure that neither the document
	# nor any of its descendents can load resources which haven't opted in, and that navigations 
	# to any top-level document that doesn't both come from the same origin and set COEP will be 
	# performed in a new browsing context group (and consequently, different process)."
	# CITE - https://docs.google.com/document/d/1zDlfvfTJ_9e8Jdc8ehuV4zMEu9ySMCiTGMS9y0GU92k/edit?pli=1&tab=t.0
	# READ - https://resourcepolicy.fyi/

	# [COOP]
	# See Mozilla  - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
	#Header set Cross-Origin-Opener-Policy: same-origin-allow-popups; report-to="https://domain.com/reports/"
	
	# [COEP]
	# See Mozilla - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
	#Header set Cross-Origin-Embedder-Policy: require-corp; report-to="https://domain.com/reports/"

	# Developers can detect whether the headers are set correctly and they are in a COOP plus COEP 
	# environment through the self.crossOriginIsolated API.
  
</IfModule>

# END
